<nav aria-label="Paginacao">
    <ul class="pagination justify-content-center">
        @foreach (var link in links) 
        { 
            <li @onclick="@(() => PaginaSelecionadaLink(link))"
                style="cursor:pointer;"
                class="page-item @(link.Enabled ? null: "disabled") @(link.Active ? "active" : null)">
                <span class="page-link" href="#">@link.Text</span>
            </li>
        }
    </ul>
</nav>

@code {
    [Parameter] public int paginaAtual { get; set; } = 1;
    [Parameter] public int quantidadeTotalPaginas { get; set; }
    [Parameter] public int Raio { get; set; } = 3;
    [Parameter] public EventCallback<int> PaginaSelecionada { get; set; }

    List<linkModel> links;

    private async Task PaginaSelecionadaLink(linkModel link)
    {
        if (link.Page == paginaAtual)
        {
            return;
        }

        if (!link.Enabled)
        {
            return;
        }

        paginaAtual = link.Page;
        await PaginaSelecionada.InvokeAsync(link.Page);
    }

    class linkModel
    {
        public linkModel(int page) : this(page, true) { }
        public linkModel(int page, bool enabled) : this(page, enabled, page.ToString()) { }
        public linkModel(int page, bool enabled, string text)
        {
            Page = page;
            Enabled = enabled;
            Text = text;
        }

        public string Text { get; set; }
        public int Page { get; set; }
        public bool Enabled { get; set; } = true;
        public bool Active { get; set; } = false;
    }

    protected override void OnParametersSet()
    {
        CarregaPaginas();
    }

    private void CarregaPaginas()
    {
        links = new List<linkModel>();

        var isLinkPaginaAnteriorHabilitado = paginaAtual != 1;
        var paginaAnterior = paginaAtual - 1;

        links.Add(new linkModel(paginaAnterior, isLinkPaginaAnteriorHabilitado, "Anterior"));

        for (int i = 1; i <= quantidadeTotalPaginas; i++)
        {
            if (i >= paginaAtual - Raio && i <= paginaAtual + Raio)
            {
                links.Add(new linkModel(i)
                {
                    Active = paginaAtual == i
                });
            }
        }

        var isLinkProximaPaginaHabilitado = paginaAtual != quantidadeTotalPaginas;
        var proximaPagina = paginaAtual + 1;

        links.Add(new linkModel(proximaPagina, isLinkProximaPaginaHabilitado, "Próximo"));
    }
}
