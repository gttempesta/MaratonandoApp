@page "/filmcatalog/films/{filmid:int}"
@inject HttpClient http
@using System.Text.Json

<div>
	<a href="/filmcatalog" class="btn btn-link">Voltar</a>
</div>
<div class="container">
	<div class="row">

		<div class="col-4 ">
			<img src="@film.Poster" style="max-width: 100%;" alt="Alternate Text" />
		</div>
		<div class="col-8">
			<div>
				<h2>@film.Titulo</h2>
			</div>
			<div>
				<p>
					<span style="font-weight: bold">Diretor:</span> @film.Diretor
				</p>
			</div>
			<div>
				<p>
					<span style="font-weight: bold">Data de Estréia:</span> @film.DataEstreia.ToString("d")
				</p>
			</div>
			<div>
				<p>
					<span style="font-weight: bold">Gênero:</span> @film.Genero
				</p>
			</div>
			<div>
				<p>
					<span style="font-weight: bold">Duração:</span> @film.Duracao min
				</p>
			</div>
			<div>
				<p>
					<span style="font-weight: bold">País de origem:</span> @film.Pais
				</p>
			</div>
			<div>
				<p>
					<span style="font-weight: bold">Sinopse:</span> @film.Sinopse
				</p>
			</div>
			<div class="row">
				<button class="btn btn-primary mr-3" @onclick="marcarComoVisto">
					@check_button  <span class="oi oi-check"></span>
				</button>
				<button class="btn btn-primary mr-3" @onclick="marcarComoFavorito">
					@fave_button <span class="oi oi-heart"></span>
				</button>
				<div>
					<label for="selectNota">Avalie:</label>
                    <select id="selectNota" class="btn btn-primary" @onchange="avaliarFilme">
                        @foreach (var nota in notas)
                         {
                        <option value="@nota" selected="@(@filmrate == nota)">@nota</option>
                         }
                    </select>
				</div>
			</div>
		</div>
	</div>
    <div class="row mt-5 mb-2" >
        <div class="input-group mb-3 col-8" style="margin: 0 auto">
            <textarea @bind="novoComentario" class="form-control" placeholder="Digite o filme..." aria-label="Escreva um comentário..." aria-describedby="button-addon2"></textarea>
            <div class="input-group-append">
                <button class="btn btn-outline-secondary" @onclick="salvarComentario" type="button" id="button-addon2">Comentar</button>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-8" style="margin: 0 auto">
            @foreach (var comentario in filmComments)
            {
                <Comentario Autor="@comentario.CreatedBy" Comment="@comentario.Comment" CriadoEm="@comentario.CreatedAt"/>
            }
        </div>
    </div>
</div>

@code {
    [Parameter] public int filmid { get; set; }
    private ApplicationUser user = new ApplicationUser();
    private Film film = new Film();
    private FilmsOnLibrary fol = new FilmsOnLibrary();
    private FilmLibrary filmlib = new FilmLibrary();
    private List<int> notas = new List<int>() { 0, 1, 2, 3, 4, 5 };
    private List<FilmComment> filmComments = new List<FilmComment>();
    private string check_button { get; set; } = "Marcar como visto";
    private string fave_button { get; set; } = "Marcar como favorito";
    private int filmrate { get; set; } = 0;
    private string novoComentario { get; set; }

    protected async override Task OnParametersSetAsync()
    {
        film = await http.GetFromJsonAsync<Film>($"api/films/{filmid}");
    }

    protected async override Task OnInitializedAsync()
    {
        user = await http.GetFromJsonAsync<ApplicationUser>("api/account/");

        filmlib = await loadFilmLibrary(user);

        fol = await loadFilmOnLibrary(filmlib);

        if (fol != null)
        {
            if (fol.FlAssistido)
                check_button = "Assistido";
            if (fol.FlFavorito)
                fave_button = "Favoritado";
            filmrate = fol.NotaFilme;
        }

        await carregarComentarios();

    }

    private async Task<FilmLibrary> loadFilmLibrary(ApplicationUser user)
    {
        List<FilmLibrary> filmsLibraries = await http.GetFromJsonAsync<List<FilmLibrary>>("api/filmlibraries/");
        FilmLibrary libraryadd = new FilmLibrary();
        bool existe = false;

        foreach (var filmlibrary in filmsLibraries)
        {
            if (filmlibrary.UserId.Equals(user.Id))
            {
                existe = true;
                return filmlibrary;
            }
        }

        if (!existe)
        {
            libraryadd.UserId = user.Id;
            var response = await http.PostAsJsonAsync<FilmLibrary>("api/filmlibraries", libraryadd);

            libraryadd = await response.Content.ReadFromJsonAsync<FilmLibrary>();
        }

        return libraryadd;
    }

    private async Task<FilmsOnLibrary> loadFilmOnLibrary(FilmLibrary filmLibrary)
    {
        List<FilmsOnLibrary> filmsOnLibraries = await http.GetFromJsonAsync<List<FilmsOnLibrary>>("api/FilmsOnLibraries/");
        FilmsOnLibrary filmsOnLibrary = new FilmsOnLibrary();

        foreach (var folibrary in filmsOnLibraries)
        {
            if (folibrary.FilmLibraryId.Equals(filmLibrary.FilmLibraryId) && folibrary.FilmId.Equals(filmid))
            {
                return folibrary;
            }
        }

        return null;
    }

    private async Task marcarComoVisto()
    {
        if (fol == null)
        {
            fol = new FilmsOnLibrary();
            fol.FilmLibraryId = filmlib.FilmLibraryId;
            fol.FilmId = film.FilmId;
            fol.FlAssistido = true;
            fol.FlFavorito = false;
            fol.NotaFilme = 0;
            fol.DataAssistido = DateTime.Now;

            await http.PostAsJsonAsync<FilmsOnLibrary>("api/FilmsOnLibraries", fol);

            check_button = "Assistido";

        }
        else
        {
            if (fol.FlAssistido)
            {
                fol.FlAssistido = false;
                fol.FlFavorito = false;
                fol.NotaFilme = 0;
                filmrate = 0;

                var response = await http.PutAsJsonAsync<FilmsOnLibrary>($"api/FilmsOnLibraries/{fol.FilmLibraryId}", fol);
                if (response.IsSuccessStatusCode)
                {
                    check_button = "Marcar como visto";
                }

            }
            else
            {
                fol.FlAssistido = true;
                fol.DataAssistido = DateTime.Now;

                var response = await http.PutAsJsonAsync<FilmsOnLibrary>($"api/FilmsOnLibraries/{fol.FilmLibraryId}", fol);
                if (response.IsSuccessStatusCode)
                {
                    check_button = "Assistido";
                }

            }
        }
    }

    private async Task marcarComoFavorito()
    {
        if (fol == null)
        {
            fol = new FilmsOnLibrary();
            fol.FilmLibraryId = filmlib.FilmLibraryId;
            fol.FilmId = film.FilmId;
            fol.FlAssistido = true;
            fol.FlFavorito = true;
            fol.NotaFilme = 0;
            fol.DataAssistido = DateTime.Now;

            await http.PostAsJsonAsync<FilmsOnLibrary>("api/FilmsOnLibraries", fol);

            check_button = "Assistido";
            fave_button = "Favoritado";
        }
        else
        {
            if (fol.FlFavorito)
            {
                fol.FlFavorito = false;

                var response = await http.PutAsJsonAsync<FilmsOnLibrary>($"api/FilmsOnLibraries/{fol.FilmLibraryId}", fol);
                if (response.IsSuccessStatusCode)
                {
                    fave_button = "Marcar como favorito";
                }

            }
            else
            {
                fol.FlFavorito = true;

                var response = await http.PutAsJsonAsync<FilmsOnLibrary>($"api/FilmsOnLibraries/{fol.FilmLibraryId}", fol);
                if (response.IsSuccessStatusCode)
                {
                    fave_button = "Favoritado";
                }

            }
        }
    }

    private async Task avaliarFilme(ChangeEventArgs e)
    {
        filmrate = Int32.Parse(e.Value.ToString());

        if (fol == null)
        {
            fol = new FilmsOnLibrary();
            fol.FilmLibraryId = filmlib.FilmLibraryId;
            fol.FilmId = film.FilmId;
            fol.FlAssistido = true;
            fol.FlFavorito = false;
            fol.NotaFilme = filmrate;
            fol.DataAssistido = DateTime.Now;

            await http.PostAsJsonAsync<FilmsOnLibrary>("api/FilmsOnLibraries", fol);

            check_button = "Assistido";
        }
        else
        {
            fol.NotaFilme = filmrate;

            var response = await http.PutAsJsonAsync<FilmsOnLibrary>($"api/FilmsOnLibraries/{fol.FilmLibraryId}", fol);
        }
    }

    private async Task salvarComentario()
    {
        if (!string.IsNullOrEmpty(novoComentario))
        {
            FilmComment fcom = new FilmComment();
            fcom.ApplicationUserId = user.Id;
            fcom.Comment = novoComentario;
            fcom.CreatedAt = DateTime.Now;
            fcom.FilmId = film.FilmId;
            fcom.CreatedBy = user.UserName;

            var response = await http.PostAsJsonAsync<FilmComment>("/api/FilmComments/", fcom);

            if (response.IsSuccessStatusCode)
            {
                novoComentario = "";
                await carregarComentarios();
            }

        }
    }

    private async Task carregarComentarios()
    {
        filmComments = await http.GetFromJsonAsync<List<FilmComment>>($"api/FilmComments/GetFilmCommentByFilm/{filmid}");
    }
}
