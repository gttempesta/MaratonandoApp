@page "/seriescatalog/series/{serieid:int}"
@inject HttpClient http
@attribute [Authorize]

<AuthorizeView>
    <Authorized>
        <div>
            <a href="/seriescatalog" class="btn btn-link">Voltar</a>
        </div>
        <div class="container">
            <div class="row">
                <div class="col-4">
                    <img src="@serie.Poster" alt="Poster de " style="max-width: 100%;" />
                </div>
                <div class="col-8">
                    <div>
                        <h2>@serie.Titulo</h2>
                        <p><span style="font-weight: bold">Data de Estréia:</span> @serie.DataEstreia.ToShortDateString()</p>
                        <p><span style="font-weight: bold">Gênero:</span> @serie.Genero</p>
                        <p><span style="font-weight: bold">País de Origem:</span> @serie.Pais</p>
                        <p><span style="font-weight: bold">Sinopse:</span> @serie.Sinopse</p>
                    </div>
                    <div class="row">
                        <div>
                            <label for="selectStatus">Status:</label>
                            <select id="selectStatus" class="btn btn-primary mr-3" @onchange="mudarStatus">
                                @foreach (var status in statusSeries)
                                {
                                    <option value="@status.Key" selected="@(statusAtual == status.Key)">@status.Value</option>
                                }
                            </select>
                        </div>
                        <button class="btn btn-primary mr-3" @onclick="marcarComoFavorito">
                            @fave_button <span class="oi oi-heart"></span>
                        </button>
                    </div>
                </div>
            </div>
            <div class="row mt-3">
                <div class="col-8" style="margin: 0 auto">
                    <select id="selectStatus" class="btn btn-primary mr-3 browser-default custom-select" @onchange="mudarTemporada">
                        @foreach (var temporada in nroTemporadas)
                        {
                            <option value="@temporada" selected="@(@tempSel == temporada)">Temporada @temporada</option>
                        }
                    </select>
                </div>
            </div>
            <div class="row mt-3 mb-5">
                <div class="col-8" style="margin: 0 auto">
                    @if (episodes == null)
                    {
                        <p><em>Carregando...</em></p>
                    }
                    else if (episodes.Count == 0)
                    {
                        <p><em>Sem episódios cadastrados...</em></p>
                    }
                    else
                    {
                        <ul class="list-group">
                            @foreach (var episode in episodes)
                            {
                                marcado = verificaMarcacao(episode);
                                <li class="list-group-item">
                                    <div class="ml-4">
                                        <input class="form-check-input" id="@episode.EpisodeId" checked="@marcado" type="checkbox" value="@episode.EpisodeId" aria-label="..." @onchange="async eventArgs => { checkBoxClicado(episode, eventArgs.Value); }">
                                        <label class="form-check-label" for="@episode.EpisodeId">@episode.nroEpisode) <a href="/seriescatalog/series/episodio/@episode.EpisodeId">@episode.titulo</a></label>
                                    </div>
                                </li>
                            }
                        </ul>
                    }

                </div>
            </div>
        </div>
    </Authorized>
</AuthorizeView>

@code{

    [Parameter] public int serieid { get; set; }
    private Serie serie = new();
    private Dictionary<int, string> statusSeries = new();
    private int statusAtual { get; set; } = 0;
    private string fave_button { get; set; } = "Marcar como favorito";
    private SerieOnLibrary SOL = new();
    private EpisodeLibrary EPLIB = new();
    private List<EpisodeOnLibrary> EOL = new();
    private List<int> nroTemporadas = new();
    private int tempSel { get; set; } = 1;
    private List<Episode> episodes = new();
    private bool marcado { get; set; }

    protected async override Task OnInitializedAsync()
    {
        serie = await http.GetFromJsonAsync<Serie>($"api/series/{serieid}");

        int valor = 1;

        while (valor <= serie.QtdTemporadas)
        {
            nroTemporadas.Add(valor);
            valor++;
        }

        await carregarEpisodiosTemporada();

        statusSeries.Add(0, "------------");
        statusSeries.Add(1, "Assistindo");
        statusSeries.Add(2, "Quero Assistir");
        statusSeries.Add(3, "Abandonei");
        statusSeries.Add(4, "Finalizada");

        ApplicationUser user = await http.GetFromJsonAsync<ApplicationUser>("api/account");
        SerieLibrary serielib = await carregarSerieLibrary(user);
        SOL = await carregarSerieOnLibrary(serielib);

        EPLIB = await carregarEpisodioLibrary(SOL);

        EOL = await carregarEpisodioOnLibraryBySerie();

        if (SOL.FlFavoritado)
            fave_button = "Favoritado";
        statusAtual = SOL.SeriesStatus;
    }

    private async Task mudarStatus(ChangeEventArgs e)
    {
        statusAtual = Int32.Parse(e.Value.ToString());

        if (statusAtual == 0)
        {
            SOL.FlFavoritado = false;
        }

        SOL.SeriesStatus = statusAtual;

        var response = await http.PutAsJsonAsync<SerieOnLibrary>($"api/SerieOnLibraries/{SOL.SerieOnLibraryId}", SOL);

        if (response.IsSuccessStatusCode)
        {
            if (!SOL.FlFavoritado)
            {
                fave_button = "Marcar como favorito";
            }
        }
    }

    private async Task<SerieLibrary> carregarSerieLibrary(ApplicationUser user)
    {
        var sl = await http.GetFromJsonAsync<SerieLibrary>($"api/SerieLibraries/getUserLoadSerie/{user.Id}");

        if (sl.UserId == null && sl.SerieLibraryId == 0)
        {
            sl.UserId = user.Id;

            var response = await http.PostAsJsonAsync<SerieLibrary>("api/SerieLibraries", sl);

            sl = await response.Content.ReadFromJsonAsync<SerieLibrary>();
        }

        return sl;
    }

    private async Task<SerieOnLibrary> carregarSerieOnLibrary(SerieLibrary sl)
    {
        var sol = await http.GetFromJsonAsync<SerieOnLibrary>($"api/SerieOnLibraries/getSerieLibrary/{sl.SerieLibraryId}/{serieid}");

        if (sol.SerieLibraryId == 0 && sol.SerieId == 0)
        {
            sol.SerieLibraryId = sl.SerieLibraryId;
            sol.SerieId = serieid;
            sol.SeriesStatus = 0;
            sol.FlFavoritado = false;

            var response = await http.PostAsJsonAsync<SerieOnLibrary>("api/SerieOnLibraries", sol);

            sol = await response.Content.ReadFromJsonAsync<SerieOnLibrary>();
        }

        return sol;
    }

    private async Task<EpisodeLibrary> carregarEpisodioLibrary(SerieOnLibrary solib)
    {
        var epl = await http.GetFromJsonAsync<EpisodeLibrary>($"api/EpisodeLibraries/getEpLibBySOL/{solib.SerieOnLibraryId}");

        if (epl.EpisodeLibraryId == 0 && epl.SerieOnLibraryId == 0)
        {
            epl.SerieOnLibraryId = solib.SerieOnLibraryId;

            var response = await http.PostAsJsonAsync<EpisodeLibrary>("api/EpisodeLibraries", epl);

            epl = await response.Content.ReadFromJsonAsync<EpisodeLibrary>();
        }

        return epl;
    }

    private async Task<List<EpisodeOnLibrary>> carregarEpisodioOnLibraryBySerie()
    {
        return await http.GetFromJsonAsync<List<EpisodeOnLibrary>>($"api/episodeOnLibraries/GetEpisodesBySeriesChecked/{EPLIB.EpisodeLibraryId}");
    }

    private async Task marcarComoFavorito()
    {
        if (!SOL.FlFavoritado && SOL.SeriesStatus == 0)
        {
            SOL.FlFavoritado = true;
            SOL.SeriesStatus = 1;
        }
        else if (!SOL.FlFavoritado && SOL.SeriesStatus != 0)
        {
            SOL.FlFavoritado = true;
        }
        else if (SOL.FlFavoritado)
        {
            SOL.FlFavoritado = false;
        }

        var response = await http.PutAsJsonAsync<SerieOnLibrary>($"api/SerieOnLibraries/{SOL.SerieOnLibraryId}", SOL);

        if (response.IsSuccessStatusCode)
        {
            statusAtual = SOL.SeriesStatus;
            if (SOL.FlFavoritado)
            {
                fave_button = "Favoritado";
            }
            else
            {
                fave_button = "Marcar como favorito";
            }
        }
    }

    private async Task carregarEpisodiosTemporada()
    {
        episodes = await http.GetFromJsonAsync<List<Episode>>($"api/Episodes/{serieid}/temporada/{tempSel}");
        StateHasChanged();
    }

    private async Task mudarTemporada(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out int id))
        {
            tempSel = id;
            await carregarEpisodiosTemporada();
        }
    }

    private async Task checkBoxClicado(Episode ep, object checkValue)
    {
        if ((bool)checkValue)
        {
            EpisodeOnLibrary novoEol = new();

            novoEol.EpisodeLibraryId = EPLIB.EpisodeLibraryId;
            novoEol.FlAssistido = true;
            novoEol.NotaEpisodio = 0;
            novoEol.EpisodeId = ep.EpisodeId;
            novoEol.DataAssistido = DateTime.Now;

            var response = await http.PostAsJsonAsync<EpisodeOnLibrary>("api/EpisodeOnLibraries", novoEol);
        }
        else
        {
            var response = await http.DeleteAsync($"api/EpisodeOnLibraries/{ep.EpisodeId}/{EPLIB.EpisodeLibraryId}");
        }

        EOL = await carregarEpisodioOnLibraryBySerie();
        StateHasChanged();
    }

    private bool verificaMarcacao(Episode episode)
    {
        foreach (var epmarcado in EOL)
        {
            if (episode.EpisodeId == epmarcado.EpisodeId)
                return true;
        }
        return false;
    }
}